// schema.prisma

datasource db {
  provider = "postgresql" // or "mysql", etc.
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String           @id @default(uuid())
  username         String           @unique
  password         String           
  files            File[]           // One-to-many relation with files
  folders          Folder[]         // One-to-many relation with folders
  favorites        Favorite[]       // One-to-many relation with favorites
  recentlyViewed   RecentlyViewed[] // One-to-many relation with recently viewed items
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model Folder {
  id               String           @id @default(uuid())
  name             String
  user             User             @relation(fields: [userId], references: [id])
  userId           String
  parentFolder     Folder?          @relation("Subfolders", fields: [parentFolderId], references: [id])
  parentFolderId   String?
  subfolders       Folder[]         @relation("Subfolders")
  files            File[]           // One-to-many relation with files
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  Favorite         Favorite[]
  enterprise       Enterprise?      @relation(fields: [enterpriseId], references: [id])
  enterpriseId     Int?

  @@unique([ parentFolderId, name])
}

model File {
  id               String           @id @default(uuid())
  name             String
  user             User             @relation(fields: [userId], references: [id])
  userId           String
  parentFolder     Folder?          @relation(fields: [parentFolderId], references: [id]) // Parent folder for file
  parentFolderId   String?
  isFavorite       Boolean          @default(false)
  path             String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  RecentlyViewed   RecentlyViewed[]
  Favorite         Favorite[]
  enterprise       Enterprise?      @relation(fields: [enterpriseId], references: [id])
  enterpriseId     Int?

  @@unique([ parentFolderId, name])
}

model Favorite {
  id               Int              @id @default(autoincrement())
  user             User             @relation(fields: [userId], references: [id])
  userId           String
  file             File?            @relation(fields: [fileId], references: [id])
  fileId           String?
  folder           Folder?          @relation(fields: [folderId], references: [id])
  folderId         String?
  createdAt        DateTime         @default(now())

  @@unique([userId, fileId, folderId]) // Ensures unique favorite entries
}

model RecentlyViewed {
  id               Int              @id @default(autoincrement())
  user             User             @relation(fields: [userId], references: [id])
  userId           String
  file             File             @relation(fields: [fileId], references: [id])
  fileId           String
  lastViewedAt     DateTime         @default(now())

  @@unique([userId, fileId]) // Ensures unique recent view entries
}


model Enterprise {
  id               Int              @id @default(autoincrement())
  name             String
  files            File[]           // One-to-many relation with files
  folders          Folder[]         // One-to-many relation with folders
}