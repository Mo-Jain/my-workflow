// schema.prisma

datasource db {
  provider = "postgresql" // or "mysql", etc.
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String           @id @default(uuid())
  usermail         String           @unique
  name             String
  password         String           
  files            File[]           // One-to-many relation with files
  folders          Folder[]         // One-to-many relation with folders
  recentlyViewed   RecentlyViewed[] // One-to-many relation with recently viewed items
  assignments      Assignment[]
  workflows        Workflows[]
}

model Folder {
  id               String           @id @default(uuid())
  name             String
  user             User             @relation(fields: [creatorId], references: [id])
  creatorId        String
  parentFolder     Folder?          @relation("Subfolders", fields: [parentFolderId], references: [id])
  parentFolderId   String?
  isFavorite       Boolean          @default(false)
  path             String
  subfolders       Folder[]         @relation("Subfolders")
  files            File[]           // One-to-many relation with files
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@unique([ parentFolderId, name])
}

model File {
  id               String           @id @default(uuid())
  name             String
  user             User             @relation(fields: [creatorId], references: [id])
  creatorId        String
  type             String
  size             String
  parentFolder     Folder?          @relation(fields: [parentFolderId], references: [id]) // Parent folder for file
  parentFolderId   String?
  isFavorite       Boolean          @default(false)
  path             String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  RecentlyViewed   RecentlyViewed[]

  @@unique([ parentFolderId, name])
}


model RecentlyViewed {
  id               Int              @id @default(autoincrement())
  user             User             @relation(fields: [userId], references: [id])
  userId           String
  file             File             @relation(fields: [fileId], references: [id])
  fileId           String
  lastViewedAt     DateTime         @default(now())

  @@unique([userId, fileId]) // Ensures unique recent view entries
}

model Assignment {
  id               Int              @id @default(autoincrement())
  name             String
  location         String
  dueDate          DateTime?
  priority         String           @default("medium")
  status           String           @default("ok")
  userId           String
  User             User             @relation(fields: [userId], references: [id])
}

model Workflows {
  id               Int              @id @default(autoincrement())
  status           String           @default("on time")
  dueDate          DateTime?        
  userId           String
  workflowName     String
  currentStep      String
  assignedTo       String
  startDate        DateTime         @default(now())
  User             User             @relation(fields: [userId], references: [id])
}


