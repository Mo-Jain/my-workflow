// schema.prisma

datasource db {
  provider = "postgresql" // or "mysql", etc.
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model User {
  id                   String           @id @default(uuid())
  usermail             String           @unique
  name                 String 
  password             String
  personalWorkspaceId  String?

  // Relations
  files                File[]           // One-to-many relation with files
  folders              Folder[]         // One-to-many relation with folders
  recentlyViewed       RecentlyViewed[] // One-to-many relation with recently viewed items
    // One-to-Many Relation: Creator Relation
  workflowsCreated     Workflows[]       @relation("CreatorRelation")
  workflowAssigned     Workflows[]       @relation("AssigneeRelation")

  // Many-to-Many Relation: Assignee Relation
  approvedWorkflows    ApprovalRecord[]
  workflowData         workflowData[]
}

model Workflows {
  id                  Int                @id @default(dbgenerated("(floor(random() * (9999999 - 1000000 + 1)) + 1000000)::int")) @unique
  status              String             @default("on time")
  dueDate             DateTime?
  workflowName        String
  currentStep         String?
  startDate           DateTime           @default(now())
  creatorId           String
  currentAssigneeId   String?
  stopDate            DateTime?
  type                String      
  approvalDate        DateTime?       
  // One-to-Many Relation: Creator
  creator             User               @relation("CreatorRelation", fields: [creatorId], references: [id])
  currentAssigneeUser User?              @relation("AssigneeRelation", fields: [currentAssigneeId], references: [id])
  files               File[]
  // Many-to-Many Relation: Assignees
  approvers           ApprovalRecord[]
  workflowData        workflowData[]    @relation("workflowData")
}


model ApprovalRecord {
  userId             String              // The user who approved
  workflowId         Int                 // The workflow approved
  approvalDate       DateTime?             // Date of approval
  assignedDate       DateTime            @default(now()) // Date of assignment
  comments           String?
  order              Int                 @default(1)
  status             String?
  step               String
  // Relations
  user               User                @relation(fields: [userId], references: [id])
  workflow           Workflows           @relation(fields: [workflowId], references: [id])

  @@id([userId, workflowId])         // Prevent duplicate approvals by the same user
}


model Folder {
  id               String           @id @default(uuid())
  name             String
  user             User?             @relation(fields: [creatorId], references: [id])
  creatorId        String?
  parentFolder     Folder?          @relation("Subfolders", fields: [parentFolderId], references: [id])
  parentFolderId   String?
  isFavorite       Boolean          @default(false)
  path             String
  subfolders       Folder[]         @relation("Subfolders")
  files            File[]           // One-to-many relation with files
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@unique([ parentFolderId, name])
}

model File {
  id               String           @id @default(uuid())
  name             String
  user             User             @relation(fields: [creatorId], references: [id])
  creatorId        String
  type             String
  size             String
  parentFolder     Folder?          @relation(fields: [parentFolderId], references: [id]) // Parent folder for file
  parentFolderId   String?
  isFavorite       Boolean          @default(false)
  path             String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  RecentlyViewed   RecentlyViewed[]
  worflows         Workflows?        @relation(fields: [workflowId], references: [id])
  workflowId       Int?

  @@unique([ parentFolderId, name])
}


model RecentlyViewed {
  id               String           @id @default(uuid())
  user             User             @relation(fields: [userId], references: [id])
  userId           String
  file             File             @relation(fields: [fileId], references: [id])
  fileId           String
  lastViewedAt     DateTime         @default(now())

  @@unique([userId, fileId]) // Ensures unique recent view entries
}


model workflowData {
  id               String           @id @default(cuid())
  workflowId       Int
  workflow         Workflows         @relation("workflowData", fields: [workflowId], references: [id])
  userId           String
  user             User              @relation(fields: [userId], references: [id])
  workflowType     String
  workflowName     String
  department       String
  companyName      String
  site             String
  referenceNumber  String
  sbu              String
  clauseNumber     String
  subject          String?
  to               String?
  project          String?
  remarks          String?
  finalApproval    Boolean          @default(false)
  notification     Boolean          @default(false)
}



